def gv
def img

pipeline
    {

	agent any
	    environment
	        {
	            CLOUDSDK_CORE_PROJECT='fast-api-python-04030613'
	            LOCATION='southamerica-east1-b'
                CLIENT_EMAIL='jenkins-fast-api@fast-api-python-04030613.iam.gserviceaccount.com'
                GCLOUD_CREDS=credentials('gcloud-fast-api-cred')
                GCLOUDS_CRED_GKE='gke-fast-api-python-04030613-creds'
                CLUSTER_NAME='fast-api-python'
		        hubcred='docker-hub-login'
		        hub_tag="vishaljudoka/fast-api-python"
		        Image=''
	        }

	    parameters
	        {

		        string ( name :"JenkinPipeline-Declarative" , defaultValue : "JenkinPipeline-Declarative 1.0" , description : "JenkinPipeline-Declarative" )
		    	choice ( name:"version" , choices : ['1.1.0' , '1.1.1' , '1.1.2' ], description : "version build number" )
			    booleanParam ( name : "executeTests" , defaultValue :  true , description : "execute test" )

            }

	stages
	    {

	       stage('GIT checkout')
                {
			        steps
			            {
			    		    git branch: 'main', url:'https://github.com/vishaljudoka/fast-api-python.git'
        	            }
                }
            stage('Init')
		        {
			        steps
			        {
				        script
				            {   //this is just example to run groovy script
				                gv= load "script.groovy"
						    }

			        }
			    }



		    stage ('Stop Previous container on Local')
		        {
                    steps
                        {  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {


                            echo "Old ${JOB_NAME}  going to be deleted"
                            bat returnStdout: true, script: "docker stop $JOB_NAME"
                            bat returnStdout: true, script: "docker rm  $JOB_NAME"
                            bat returnStdout: true, script: "docker image prune -a --force"
                            }

                        }
                }

           stage('Build Image')
		        {
		    	    steps
		    	        {
		    	            script
		    	                {
		    		               //img = hubtag + ":${env.BUILD_ID}"
		    		               img = hub_tag + ":latest"
		    		               println ("Below docker image is going to be created : ${img}")
		    		               Image = docker.build("${img}")
		    		            }
                        }
                }

           stage ('Testing Python application')
		        {
                    steps
                        {
                            echo "Testing started for ${JOB_NAME} "
                            bat "py.test --verbose --junit-xml Test/results.xml src/test_main.py"

                        }
                    post {
                        always {
                    //This junit step archives the JUnit XML report (generated by the py.test command above) and
                    //exposes the results through the Jenkins interface.
                    //The post section’s always condition that contains this junit step ensures that the step is
                    //always executed at the completion of the Test stage, regardless of the stage’s outcome.
                        junit 'Test/results.xml'
                                }
                        }
                }


		    stage('Deploying on Test Environment')
		        {
		    	    when
		    	        {
		    		        expression
		    		            {
		    		                params.executeTests
		    		            }
		    		    }
		    	    steps
		    	        {
		    			    bat "docker run -d --name ${JOB_NAME} -p 8000:8000 ${img} "
                        }
                }

		    stage('Push code to DockerHub')
		        {
		    	    steps
		    	        {
		    		        script
		    		            {       docker.withRegistry ( 'https://registry.hub.docker.com ', hubcred)
		    			                {
		    				            Image.push()
		    				            }
                                }
    		    	    }
                }

           stage('getting Prod K8s Details')
                {
                    steps
                    {
                        bat "gcloud version"
                        bat "gcloud auth activate-service-account --key-file=$GCLOUD_CREDS"
                        bat 'gcloud compute zones list'

                    }
                }
            stage('Deploying to  GKE K8s Production')
		        {
			        steps{
                    echo 'GKE Deployment started ...'
                    step([$class: 'KubernetesEngineBuilder', projectId: env.CLOUDSDK_CORE_PROJECT, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'app.yaml', credentialsId: env.GCLOUDS_CRED_GKE, verifyDeployments: false])
                    echo "Deploying ingress YAML ..."
                    step([$class: 'KubernetesEngineBuilder', projectId: env.CLOUDSDK_CORE_PROJECT, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'ingress.yaml', credentialsId: env.GCLOUDS_CRED_GKE, verifyDeployments: false])
                    echo "GKE Deployment Finished ..."
                }
                }

        }
                post
                {

                    always {
                        // Let's wipe out the workspace before we finish!
                            echo "Full CICD deployment completed"
                            }
                    success {
                         echo "All steps for CICD pipeline completed successfully"
                         /*
                         script
			        	        {
                        gv.sendEmail("Successful"); } */
                            }
                    unstable {
                        echo "Deplyment looks to be unstable please verify once"
                    }
                    failure {
                         echo "Oops : Something went wrong please verify the last build"
                        /*script
			        	        {
                        gv.sendEmail("failure"); } */
                    }
                }


    }
